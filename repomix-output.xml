This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/workflows/build-and-deploy.yml
assets/app.js
assets/logo.svg
assets/manifest.webmanifest
assets/style.css
assets/sw.js
data/images.json
index.html
LICENSE
package.json
README.md
scripts/embed-license.js
scripts/generate-manifest.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/build-and-deploy.yml">
name: build-and-deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Install exiftool
        run: sudo apt-get update && sudo apt-get install -y exiftool

      - name: Embed LSA-1.0 notice into images
        run: npm run embed:license

      - name: Generate manifest
        run: npm run build:manifest

      - name: Commit changes (if any)
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "[skip ci] embed license + regenerate manifest"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
</file>

<file path="assets/app.js">
const LICENSE_URL = 'https://github.com/ShortTimeNoSee/liberty-sharealike/blob/v1.0/LICENSE';
const NOTICE = `Licensed under Liberty-ShareAlike 1.0 (LSA-1.0). Include this license or a stable link if you distribute adaptations. No attribution required. ${LICENSE_URL}`;

const state = {
  images: [],
  filtered: [],
  layout: localStorage.getItem('layout') || 'masonry', // or 'grid'
  sort: localStorage.getItem('sort') || 'newest',
  query: ''
};

const els = {
  gallery: document.getElementById('gallery'),
  cardTemplate: document.getElementById('cardTemplate'),
  search: document.getElementById('search'),
  sort: document.getElementById('sort'),
  layoutToggle: document.getElementById('layoutToggle'),
  themeToggle: document.getElementById('themeToggle'),
  lb: document.getElementById('lightbox'),
  lbTitle: document.getElementById('lbTitle'),
  lbDesc: document.getElementById('lbDesc'),
  lbTags: document.getElementById('lbTags'),
  lbImg: document.getElementById('lbImg'),
  rawLink: document.getElementById('rawLink'),
  licenseLink: document.getElementById('licenseLink'),
  copyNotice: document.getElementById('copyNotice'),
  stampBtn: document.getElementById('stampBtn'),
  closeLb: document.getElementById('closeLb'),
  lbJsonLd: document.getElementById('lbJsonLd'),
};

async function init() {
  try {
    const res = await fetch('data/images.json', { cache: 'no-store' });
    state.images = await res.json();
  } catch (e) {
    console.error('Failed to load manifest', e);
    state.images = [];
  }
  applySort();
  bindEvents();
  setLayout(state.layout);
  render();
  registerSW();
}

function bindEvents() {
  els.search.addEventListener('input', (e) => { state.query = e.target.value.trim().toLowerCase(); render(); });
  els.sort.value = state.sort;
  els.sort.addEventListener('change', () => { state.sort = els.sort.value; localStorage.setItem('sort', state.sort); applySort(); render(); });
  els.layoutToggle.addEventListener('click', () => { setLayout(state.layout === 'masonry' ? 'grid' : 'masonry'); render(); });
  document.getElementById('themeToggle').addEventListener('click', toggleTheme);

  els.closeLb.addEventListener('click', () => els.lb.close());
  els.lb.addEventListener('click', (e) => { if (e.target === els.lb) els.lb.close(); });
  els.copyNotice.addEventListener('click', () => {
    navigator.clipboard.writeText(NOTICE).then(() => toast('License notice copied'));
  });
  els.stampBtn.addEventListener('click', stampAndDownload);
}

function setLayout(mode) {
  state.layout = mode;
  localStorage.setItem('layout', mode);
  els.gallery.classList.toggle('masonry', mode === 'masonry');
  els.gallery.classList.toggle('grid', mode === 'grid');
  els.layoutToggle.textContent = mode === 'masonry' ? 'Grid' : 'Masonry';
}

function applySort() {
  const coll = [...state.images];
  switch (state.sort) {
    case 'oldest':
      coll.sort((a, b) => (a.added || 0) - (b.added || 0));
      break;
    case 'title':
      coll.sort((a, b) => a.title.localeCompare(b.title));
      break;
    case 'size':
      coll.sort((a, b) => (b.bytes || 0) - (a.bytes || 0));
      break;
    case 'newest':
    default:
      coll.sort((a, b) => (b.added || 0) - (a.added || 0));
  }
  state.filtered = coll;
}

function matchesQuery(img, q) {
  if (!q) return true;
  const hay = [img.title, img.description, ...(img.tags || [])].join(' ').toLowerCase();
  return hay.includes(q);
}

function render() {
  const q = state.query;
  els.gallery.innerHTML = '';
  const frag = document.createDocumentFragment();
  state.filtered.filter(img => matchesQuery(img, q)).forEach(img => {
    const node = els.cardTemplate.content.firstElementChild.cloneNode(true);
    const thumb = node.querySelector('.thumb');
    const title = node.querySelector('.title');
    const dims = node.querySelector('.badge.dims');
    const size = node.querySelector('.badge.size');
    const tags = node.querySelector('.tags');

    thumb.src = img.src;
    thumb.alt = img.alt || img.title || 'image';
    title.textContent = img.title || img.file;
    dims.textContent = `${img.width}Ã—${img.height}`;
    size.textContent = humanBytes(img.bytes);

    (img.tags || []).forEach(t => {
      const span = document.createElement('span');
      span.className = 'tag';
      span.textContent = `#${t}`;
      span.addEventListener('click', () => { els.search.value = t; state.query = t; render(); });
      tags.appendChild(span);
    });

    const open = () => openLightbox(img);
    node.querySelector('.quickview').addEventListener('click', open);
    node.addEventListener('keydown', (e) => { if (e.key === 'Enter') open(); });
    node.addEventListener('click', (e) => {
      if (e.target.closest('.quickview')) return;
      open();
    });

    frag.appendChild(node);
  });
  els.gallery.appendChild(frag);
}

function openLightbox(img) {
  els.lbTitle.textContent = img.title || img.file;
  els.lbDesc.textContent = img.description || '';
  els.lbImg.src = img.src;
  els.lbImg.alt = img.alt || img.title || 'image';

  els.rawLink.href = img.src;
  els.rawLink.download = img.file;
  els.licenseLink.href = LICENSE_URL;

  els.lbTags.innerHTML = '';
  (img.tags || []).forEach(t => {
    const span = document.createElement('span');
    span.className = 'tag';
    span.textContent = `#${t}`;
    els.lbTags.appendChild(span);
  });

  // JSON-LD for the current image
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "ImageObject",
    "name": img.title || img.file,
    "contentUrl": location.origin + '/' + img.src,
    "thumbnail": location.origin + '/' + img.src,
    "description": img.description || "",
    "width": img.width,
    "height": img.height,
    "encodingFormat": img.mime || "",
    "license": LICENSE_URL
  };
  els.lbJsonLd.textContent = JSON.stringify(jsonLd);

  els.lb.showModal();
}

function toggleTheme() {
  const now = (document.documentElement.dataset.theme === 'light') ? 'dark' : 'light';
  document.documentElement.dataset.theme = now;
  localStorage.setItem('theme', now);
}

function humanBytes(n) {
  if (!n && n !== 0) return '';
  const units = ['B','KB','MB','GB'];
  let u = 0, x = n;
  while (x >= 1024 && u < units.length-1) { x /= 1024; u++; }
  return `${x.toFixed(x < 10 && u > 0 ? 1 : 0)} ${units[u]}`;
}

// Client-side stamping: optional "download w/ notice" without touching originals.
async function stampAndDownload() {
  const imgEl = els.lbImg;
  await imgEl.decode();
  const canvas = document.createElement('canvas');
  const margin = Math.max(24, Math.round(imgEl.naturalWidth * 0.02));
  const footerH = Math.max(54, Math.round(imgEl.naturalHeight * 0.05));
  canvas.width = imgEl.naturalWidth;
  canvas.height = imgEl.naturalHeight + footerH;

  const ctx = canvas.getContext('2d');
  ctx.drawImage(imgEl, 0, 0);

  // footer background
  ctx.fillStyle = 'rgba(0,0,0,0.75)';
  ctx.fillRect(0, imgEl.naturalHeight, canvas.width, footerH);

  // text
  ctx.fillStyle = '#fff';
  ctx.font = `bold ${Math.max(18, Math.round(footerH*0.35))}px system-ui, sans-serif`;
  ctx.textBaseline = 'middle';

  const short = `LSA-1.0 â€” ${LICENSE_URL}`;
  ctx.fillText(short, margin, imgEl.naturalHeight + footerH/2);

  const a = document.createElement('a');
  a.download = (els.lbTitle.textContent || 'image') + '-lsa.jpg';
  a.href = canvas.toDataURL('image/jpeg', 0.95);
  a.click();
}

// Lightweight toast
let toastTimer = null;
function toast(msg) {
  let t = document.getElementById('toast');
  if (!t) {
    t = document.createElement('div');
    t.id = 'toast';
    Object.assign(t.style, {
      position:'fixed', left:'50%', bottom:'20px', transform:'translateX(-50%)',
      background:'#111a', color:'#fff', padding:'8px 12px', borderRadius:'8px',
      zIndex:9999, backdropFilter:'blur(4px)'
    });
    document.body.appendChild(t);
  }
  t.textContent = msg;
  t.style.opacity = '1';
  clearTimeout(toastTimer);
  toastTimer = setTimeout(()=> t.style.opacity='0', 1800);
}

async function registerSW() {
  if ('serviceWorker' in navigator) {
    try { await navigator.serviceWorker.register('assets/sw.js'); }
    catch (e) { console.warn('SW failed', e); }
  }
}

init();
</file>

<file path="assets/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 120 120">
  <defs>
    <linearGradient id="g" x1="0" x2="1" y1="0" y2="1">
      <stop offset="0" stop-color="#4EA"/>
      <stop offset="1" stop-color="#5DF"/>
    </linearGradient>
  </defs>
  <rect width="120" height="120" rx="24" fill="#0b0f14"/>
  <path d="M24 80c0-22 18-40 40-40h10V24l22 22-22 22V56H64c-13 0-24 11-24 24 0 4-3 8-8 8s-8-4-8-8z" fill="url(#g)"/>
</svg>
</file>

<file path="assets/manifest.webmanifest">
{
  "name": "LSA Gallery",
  "short_name": "LSA",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#0b0f14",
  "theme_color": "#0b0f14",
  "icons": [
    { "src": "logo.svg", "sizes": "any", "type": "image/svg+xml", "purpose": "any maskable" }
  ]
}
</file>

<file path="assets/style.css">
:root {
  --bg: #0b0f14;
  --bg-elev: #111720;
  --text: #e7ecf3;
  --muted: #9aa6b2;
  --brand: #3ae9a4;
  --accent: #5ad1ff;
  --card: #0f151d;
  --border: #1c2532;
  --shadow: 0 10px 30px rgba(0,0,0,.25);
}

:root[data-theme="light"] {
  --bg: #f6f8fb;
  --bg-elev: #ffffff;
  --text: #0b0f14;
  --muted: #4c5969;
  --brand: #0fa36b;
  --accent: #006bb8;
  --card: #ffffff;
  --border: #e6ecf2;
  --shadow: 0 10px 20px rgba(0,0,0,.08);
}

* { box-sizing: border-box; }
html, body { height: 100%; }
body {
  margin: 0;
  background: radial-gradient(1200px 600px at 80% -10%, rgba(90,209,255,.08), transparent 60%),
              radial-gradient(900px 900px at -10% 10%, rgba(58,233,164,.08), transparent 50%),
              var(--bg);
  color: var(--text);
  font: 16px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
}

a { color: var(--accent); text-decoration: none; }
a:hover { text-decoration: underline; }

.btn {
  background: var(--brand);
  border: 0;
  color: #051015;
  padding: .6rem .9rem;
  border-radius: .6rem;
  font-weight: 700;
  cursor: pointer;
  transition: transform .08s ease, box-shadow .2s ease;
  box-shadow: var(--shadow);
}
.btn:hover { transform: translateY(-1px); }
.btn:active { transform: translateY(0); }
.btn.outline {
  background: transparent; color: var(--text);
  border: 2px solid var(--border);
}

.site-header {
  display:flex; align-items:center; justify-content:space-between;
  padding: .8rem 1rem; position: sticky; top:0; z-index: 50;
  backdrop-filter: blur(8px);
  background: color-mix(in oklab, var(--bg) 90%, transparent);
  border-bottom: 1px solid var(--border);
}
.brand { display:flex; align-items:center; gap:.6rem; font-weight:800; color: var(--text); }
.brand img { width: 28px; height: 28px; }
.top-actions { display:flex; align-items:center; gap:.5rem; }

.hero { padding: 2rem 1rem 1rem; text-align:center; }
.hero h1 { margin:0; font-size: clamp(1.6rem, 3vw, 2.4rem); }
.tagline { color: var(--muted); margin:.6rem 0 1rem; }
.controls {
  display:flex; gap:.6rem; justify-content:center; flex-wrap:wrap;
}
.controls input[type="search"], .controls select {
  background: var(--bg-elev);
  color: var(--text);
  border: 1px solid var(--border);
  padding:.6rem .8rem; border-radius:.6rem; min-width: 260px;
}

.gallery {
  padding: 1rem; display: grid; gap: 1rem;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  align-items: start;
}

.gallery.masonry .card .thumb { height: auto; }
.gallery.grid .card .thumb { height: 220px; object-fit: cover; }

.card {
  background: var(--card); border: 1px solid var(--border);
  border-radius: .9rem; overflow: hidden; box-shadow: var(--shadow);
  display:flex; flex-direction:column;
}
.thumb-wrap { position: relative; }
.thumb { width: 100%; display:block; background: #0002; }
.quickview {
  position:absolute; right:.6rem; bottom:.6rem; opacity:0;
  transform: translateY(6px);
  transition: opacity .2s ease, transform .2s ease;
}
.thumb-wrap:hover .quickview { opacity:1; transform: translateY(0); }

.meta { padding:.8rem; display:flex; flex-direction:column; gap:.5rem; }
.title { margin: 0; font-size: 1rem; line-height:1.3; }
.badges { display:flex; gap:.4rem; flex-wrap:wrap; }
.badge {
  font-size:.75rem; background: var(--bg-elev); color: var(--muted);
  border:1px solid var(--border); padding:.2rem .5rem; border-radius:.5rem;
}
.badge.lsa { color:#081; border-color:#0a3; }

.tags { display:flex; gap:.4rem; flex-wrap:wrap; }
.tags .tag {
  font-size:.75rem; padding:.2rem .5rem; border-radius:.5rem;
  border:1px dashed var(--border); color:var(--muted);
}

.lightbox { width:min(1100px, 96vw); border:none; border-radius:1rem; padding:0; }
.lightbox::backdrop { backdrop-filter: blur(6px); background: rgba(0,0,0,.4); }
.lb-header {
  display:flex; align-items:center; justify-content:space-between;
  border-bottom:1px solid var(--border); padding: .8rem 1rem; background: var(--bg-elev);
}
.lb-header h2 { margin:0; font-size:1.1rem; }
.lb-actions { display:flex; gap:.5rem; flex-wrap:wrap; }
.lb-body { padding: 1rem; }
.lb-body img { width:100%; height:auto; display:block; border-radius:.6rem; }
.desc { color: var(--muted); }

.site-footer {
  padding: 2rem 1rem; text-align:center; color: var(--muted);
  border-top:1px solid var(--border); margin-top: 2rem;
}
.muted { color: var(--muted); }
</file>

<file path="assets/sw.js">
const CACHE = 'lsa-gallery-v1';
const ASSETS = [
  '/', '/index.html',
  '/assets/style.css',
  '/assets/app.js',
  '/assets/logo.svg',
  '/assets/manifest.webmanifest',
  '/data/images.json'
];

self.addEventListener('install', (e) => {
  e.waitUntil(caches.open(CACHE).then(c => c.addAll(ASSETS)));
});

self.addEventListener('activate', (e) => {
  e.waitUntil(
    caches.keys().then(keys =>
      Promise.all(keys.filter(k => k !== CACHE).map(k => caches.delete(k))))
  );
});

self.addEventListener('fetch', (e) => {
  const url = new URL(e.request.url);
  // Network first for manifest, cache-first for others
  if (url.pathname.endsWith('/data/images.json')) {
    e.respondWith(
      fetch(e.request).then(r => {
        const copy = r.clone();
        caches.open(CACHE).then(c => c.put(e.request, copy));
        return r;
      }).catch(() => caches.match(e.request))
    );
    return;
  }
  e.respondWith(
    caches.match(e.request).then(cached => cached || fetch(e.request).then(r => {
      const copy = r.clone();
      caches.open(CACHE).then(c => c.put(e.request, copy));
      return r;
    }).catch(() => cached))
  );
});
</file>

<file path="data/images.json">
[
  {
    "file": "Thorn cycle thought.png",
    "src": "img/Thorn%20cycle%20thought.png",
    "title": "Thorn cycle thought",
    "description": "Line drawing of a thought bubble containing a circular arrow made of thorny vines with small leaves.",
    "alt": "Line drawing of a thought bubble with a circular thorny arrow and leaves",
    "width": 1062,
    "height": 1160,
    "bytes": 87411,
    "mime": "image/png",
    "tags": [
      "thorn",
      "cycle",
      "thought",
      "drawing",
      "lineart"
    ],
    "added": 1759278589456,
    "sha256": "de0a6cd977b34c3d0d5a21d0fa0fde6694051f098aa8bd47f259a7a8b9ffb45d"
  }
]
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>LSA Gallery â€” liberty â€¢ share â€¢ remix</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- PWA -->
  <link rel="manifest" href="assets/manifest.webmanifest">
  <meta name="theme-color" content="#0b0f14">

  <!-- Icons -->
  <link rel="icon" href="assets/logo.svg" type="image/svg+xml">

  <!-- SEO -->
  <meta name="description" content="A fast, minimalist image gallery licensed under Liberty-ShareAlike 1.0 (LSA-1.0). No attribution required. Share alike.">
  <meta property="og:title" content="LSA Gallery">
  <meta property="og:description" content="Images licensed under Liberty-ShareAlike 1.0 (LSA-1.0).">
  <meta property="og:type" content="website">
  <meta property="og:image" content="assets/logo.svg">
  <meta name="robots" content="index,follow">

  <link rel="preload" href="assets/style.css" as="style">
  <link rel="stylesheet" href="assets/style.css">

  <script>
    // theme early-switch to avoid FOUC
    (function(){
      const t = localStorage.getItem('theme');
      if (t === 'light') document.documentElement.dataset.theme = 'light';
      else document.documentElement.dataset.theme = 'dark';
    })();
  </script>
</head>
<body>
  <header class="site-header">
    <a class="brand" href="./" aria-label="Home">
      <img src="assets/logo.svg" alt="LSA logo">
      <span>LSA Gallery</span>
    </a>

    <nav class="top-actions">
      <button id="themeToggle" class="btn" aria-label="Toggle theme">Theme</button>
      <a class="btn outline" href="https://github.com/ShortTimeNoSee/liberty-sharealike/blob/v1.0/LICENSE" target="_blank" rel="noopener">LSA-1.0</a>
      <a class="btn" href="https://github.com/your-username/lsa-gallery" target="_blank" rel="noopener">GitHub</a>
    </nav>
  </header>

  <main>
    <section class="hero">
      <h1>liberty â€¢ share â€¢ remix</h1>
      <p class="tagline">No gatekeepers. No attribution burden. Share alike.</p>
      <div class="controls">
        <input id="search" type="search" placeholder="Search title / tagsâ€¦" autocomplete="off" spellcheck="false" aria-label="Search images">
        <select id="sort">
          <option value="newest">Newest</option>
          <option value="oldest">Oldest</option>
          <option value="title">Title</option>
          <option value="size">File size</option>
        </select>
        <button id="layoutToggle" class="btn">Masonry</button>
      </div>
    </section>

    <section id="gallery" class="gallery masonry" aria-live="polite">
      <!-- populated by JS -->
    </section>

    <template id="cardTemplate">
      <article class="card" tabindex="0">
        <div class="thumb-wrap">
          <img class="thumb" loading="lazy" alt="">
          <button class="quickview" title="Open" aria-label="Open">Open</button>
        </div>
        <div class="meta">
          <h3 class="title"></h3>
          <div class="badges">
            <span class="badge lsa">LSA-1.0</span>
            <span class="badge size"></span>
            <span class="badge dims"></span>
          </div>
          <div class="tags"></div>
        </div>
      </article>
    </template>

    <dialog id="lightbox" class="lightbox">
      <div class="lb-header">
        <h2 id="lbTitle"></h2>
        <div class="lb-actions">
          <a id="rawLink" class="btn outline" download>Download</a>
          <button id="stampBtn" class="btn">Download w/ notice</button>
          <button id="copyNotice" class="btn">Copy LSA notice</button>
          <a id="licenseLink" class="btn" target="_blank" rel="noopener">License</a>
          <button id="closeLb" class="btn">Close</button>
        </div>
      </div>
      <div class="lb-body">
        <img id="lbImg" alt="">
        <p id="lbDesc" class="desc"></p>
        <div id="lbTags" class="tags"></div>

        <!-- SEO/metadata for the open image -->
        <script type="application/ld+json" id="lbJsonLd"></script>
      </div>
    </dialog>
  </main>

  <footer class="site-footer">
    <p>
      Licensed under <a href="https://github.com/ShortTimeNoSee/liberty-sharealike/blob/v1.0/LICENSE" target="_blank" rel="noopener">Liberty-ShareAlike 1.0 (LSA-1.0)</a>.
      No attribution required. Share alike. <span class="muted">SPDX: LicenseRef-LSA-1.0</span>
    </p>
  </footer>

  <script src="assets/app.js" defer></script>
</body>
</html>
</file>

<file path="LICENSE">
Liberty-ShareAlike 1.0 (LSA-1.0)

=======================================================================

NOTICE: This license text is provided "as-is" and without legal advice or
warranty. The person or entity applying this license to material (the
"Licensor") grants the rights below subject to the terms and conditions
of this Liberty-ShareAlike Public License ("Public License").

Using this Public License

This Public License provides a standard set of terms and conditions that
creators and other rights holders may use to share original works of
authorship, databases, and other material subject to copyright and
certain other rights. The following considerations are for informational
purposes only and do not form part of this Public License.

     Considerations for licensors: This Public License is intended for
     use by those authorized to give the public permission to use
     material in ways otherwise restricted by copyright and certain
     other rights. Licensors should secure all rights necessary before
     applying this Public License so that the public can reuse the
     material as expected. Licensors should clearly mark any material
     not subject to this Public License. Licensors may release the
     material under other terms in addition to this Public License; any
     such separate arrangements are independent from this Public License.

     Considerations for the public: By using material under this Public
     License, a licensor grants the public permission to use the
     material under specified terms and conditions. If a licensor's
     permission is not necessary for any reasonâ€”such as under an
     applicable exception or limitation to copyrightâ€”then that use is
     not regulated by this Public License. This Public License grants
     only permissions under copyright and certain other rights that the
     licensor has authority to grant. Use of the licensed material may
     still be restricted for other reasons, including because others
     have rights in the material. A licensor may make non-binding
     requests (for example, asking that changes be marked); such
     requests are not required by this Public License but may be
     respected where reasonable.

=======================================================================

Liberty-ShareAlike 1.0 Public License

By exercising the Licensed Rights (defined below), You accept and agree
to be bound by the terms and conditions of this Liberty-ShareAlike
1.0 Public License ("Public License"). To the extent this Public
License may be interpreted as a contract, You are granted the Licensed
Rights in consideration of Your acceptance of these terms and
conditions, and the Licensor grants You such rights in consideration of
benefits the Licensor receives from making the Licensed Material
available under these terms and conditions.

Section 1 -- Definitions.

  a. Adapted Material means material subject to Copyright and Similar
     Rights that is derived from or based upon the Licensed Material and
     in which the Licensed Material is translated, altered, arranged,
     transformed, or otherwise modified in a manner requiring
     permission under the Copyright and Similar Rights held by the
     Licensor. For purposes of this Public License, where the Licensed
     Material is a musical work, performance, or sound recording,
     Adapted Material is always produced where the Licensed Material is
     synched in timed relation with a moving image.

  b. Adapter's License means the license You apply to Your Copyright
     and Similar Rights in Your contributions to Adapted Material in
     accordance with the terms and conditions of this Public License.

  c. Copyright and Similar Rights means copyright and/or similar rights
     closely related to copyright including, without limitation,
     performance, broadcast, sound recording, and Sui Generis Database
     Rights, without regard to how the rights are labeled or
     categorized.

  d. Effective Technological Measures means measures that, in the
     absence of proper authority, may not lawfully be circumvented
     under laws implementing obligations under international
     agreements concerning circumvention of technological protection.

  e. Exceptions and Limitations means fair use, fair dealing, and/or
     any other exception or limitation to Copyright and Similar Rights
     that applies to Your use of the Licensed Material.

  f. Licensed Material means the artistic or literary work, database,
     or other material to which the Licensor applied this Public
     License.

  g. Licensed Rights means the rights granted to You subject to the
     terms and conditions of this Public License, which are limited to
     all Copyright and Similar Rights that apply to Your use of the
     Licensed Material and that the Licensor has authority to license.

  h. Licensor means the individual(s) or entity(ies) granting rights
     under this Public License.

  i. Share means to make material available to the public by any means
     or process that requires permission under the Licensed Rights,
     such as reproduction, public display, public performance,
     distribution, dissemination, communication, or importation, and
     to make material available to the public including in ways that
     members of the public may access the material from a place and at
     a time individually chosen by them.

  j. Sui Generis Database Rights means rights other than copyright
     resulting from Directive 96/9/EC and any essentially equivalent
     rights anywhere in the world.

  k. You means the individual or entity exercising the Licensed Rights
     under this Public License. Your has a corresponding meaning.

Section 2 -- Scope.

  a. License grant.

       1. Subject to the terms and conditions of this Public License,
          the Licensor hereby grants You a worldwide, royalty-free,
          non-exclusive, non-sublicensable, irrevocable license to
          exercise the Licensed Rights in the Licensed Material to:

            a. reproduce and Share the Licensed Material, in whole or
               in part; and

            b. produce, reproduce, and Share Adapted Material.

       2. Exceptions and Limitations. For the avoidance of doubt, where
          Exceptions and Limitations apply to Your use, this Public
          License does not apply, and You do not need to comply with
          its terms and conditions.

       3. Term. The term of this Public License is specified in Section
          6.

       4. Media and formats; technical modifications allowed. The
          Licensor authorizes You to exercise the Licensed Rights in
          all media and formats whether now known or hereafter created,
          and to make technical modifications necessary to do so. For
          purposes of this Public License, simply making modifications
          authorized by this Section 2(a)(4) never produces Adapted
          Material.

       5. Downstream recipients.

            a. Offer from the Licensor -- Licensed Material. Every
               recipient of the Licensed Material automatically
               receives an offer from the Licensor to exercise the
               Licensed Rights under the terms and conditions of this
               Public License.

            b. Additional offer from the Licensor -- Adapted Material.
               Every recipient of Adapted Material from You
               automatically receives an offer from the Licensor to
               exercise the Licensed Rights in the Adapted Material
               under the conditions of the Adapter's License You apply.

            c. No downstream restrictions. You may not offer or impose
               any additional or different terms or conditions on, or
               apply any Effective Technological Measures to, the
               Licensed Material or Adapted Material if doing so
               restricts exercise of the Licensed Rights by any
               recipient of the Licensed Material.

       6. No endorsement. Nothing in this Public License constitutes or
          may be construed as permission to assert or imply that You
          are, or that Your use of the Licensed Material is, connected
          with, or sponsored, endorsed, or granted official status by,
          the Licensor.

  b. Other rights.

       1. Moral rights, such as the right of integrity or attribution,
          are not licensed under this Public License; however, to the
          fullest extent permitted by applicable law, the Licensor
          waives and/or agrees not to assert any moral rights that
          would interfere with the exercise of the Licensed Rights.
          Where waiver is not fully possible under local law, the
          Licensor grants You the broadest possible permission to
          exercise the Licensed Rights without restriction arising from
          moral rights.

       2. Patent and trademark rights are not licensed under this
          Public License.

       3. To the extent possible, the Licensor waives any right to
          collect royalties from You for the exercise of the Licensed
          Rights, whether directly or through a collecting society
          under any voluntary or waivable statutory or compulsory
          licensing scheme. In all other cases the Licensor expressly
          reserves any right to collect such royalties.

Section 3 -- License Conditions.

Your exercise of the Licensed Rights is expressly made subject to the
following conditions.

  a. No Attribution.

       1. No attribution, credit, identification of the creator, or
          retention of any supplied metadata is required to reproduce,
          Share, or adapt the Licensed Material or any Adapted Material.

       2. You may, at your option, indicate that You modified the
          Licensed Material, but You are not required to do so.

  b. ShareAlike.

       1. If You Share Adapted Material You produce, You must apply
          this Public License, unmodified and identified as
          "Liberty-ShareAlike Public License (LSA-1.0)", to Your
          contributions and to the Adapted Material as a whole.

       2. With any copy or distribution of the Licensed Material or
          Adapted Material that You Share, You must include either:
          (i) the full text of this Public License, or (ii) a URI or
          hyperlink to a stable copy of this Public License. This
          requirement exists only to preserve the chain of licensing
          and is not an attribution or credit requirement.

       3. You may not offer or impose any additional or different
          terms or conditions on, or apply any Effective Technological
          Measures to, the Licensed Material or Adapted Material that
          restrict exercise of the Licensed Rights granted by this
          Public License.

Section 4 -- Sui Generis Database Rights.

Where the Licensed Rights include Sui Generis Database Rights that
apply to Your use of the Licensed Material:

  a. for the avoidance of doubt, Section 2(a)(1) grants You the right
     to extract, reuse, reproduce, and Share all or a substantial
     portion of the contents of the database;

  b. if You include all or a substantial portion of the database
     contents in a database in which You have Sui Generis Database
     Rights, then the database in which You have Sui Generis Database
     Rights (but not its individual contents) is Adapted Material;
     and

  c. You must comply with the conditions in Section 3(b) if You Share
     all or a substantial portion of the contents of the database.

For the avoidance of doubt, this Section 4 supplements and does not
replace Your obligations under this Public License where the Licensed
Rights include other Copyright and Similar Rights.

Section 5 -- Disclaimer of Warranties and Limitation of Liability.

  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE
     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS
     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF
     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,
     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,
     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,
     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT
     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT
     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.

  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE
     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,
     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,
     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,
     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR
     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR
     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR
     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.

  c. The disclaimer of warranties and limitation of liability provided
     above shall be interpreted in a manner that, to the extent
     possible, most closely approximates an absolute disclaimer and
     waiver of all liability.

Section 6 -- Term and Termination.

  a. This Public License applies for the term of the Copyright and
     Similar Rights licensed here. However, if You fail to comply with
     this Public License, then Your rights under this Public License
     terminate automatically.

  b. Where Your right to use the Licensed Material has terminated under
     Section 6(a), it reinstates:

       1. automatically as of the date the violation is cured, provided
          it is cured within 30 days of Your discovery of the
          violation; or

       2. upon express reinstatement by the Licensor.

     For the avoidance of doubt, this Section 6(b) does not affect any
     right the Licensor may have to seek remedies for Your violations
     of this Public License.

  c. For the avoidance of doubt, the Licensor may also offer the
     Licensed Material under separate terms or conditions or stop
     distributing the Licensed Material at any time; however, doing so
     will not terminate this Public License for existing copies.

  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public
     License.

Section 7 -- Other Terms and Conditions.

  a. The Licensor shall not be bound by any additional or different
     terms or conditions communicated by You unless expressly agreed.

  b. Any arrangements, understandings, or agreements regarding the
     Licensed Material not stated herein are separate from and
     independent of the terms and conditions of this Public License.

Section 8 -- Interpretation.

  a. For the avoidance of doubt, this Public License does not, and
     shall not be interpreted to, reduce, limit, restrict, or impose
     conditions on any use of the Licensed Material that could lawfully
     be made without permission under this Public License.

  b. To the extent possible, if any provision of this Public License is
     deemed unenforceable, it shall be automatically reformed to the
     minimum extent necessary to make it enforceable. If the provision
     cannot be reformed, it shall be severed from this Public License
     without affecting the enforceability of the remaining terms and
     conditions.

  c. No term or condition of this Public License will be waived and no
     failure to comply consented to unless expressly agreed to by the
     Licensor.

  d. Nothing in this Public License constitutes or may be interpreted
     as a limitation upon, or waiver of, any privileges and immunities
     that apply to the Licensor or You, including from the legal
     processes of any jurisdiction or authority.

=======================================================================

Liberty-ShareAlike Public License (LSA-1.0) â€” Short Form Notice

  Licensed under the Liberty-ShareAlike Public License (LSA-1.0).
  You may use, share, and adapt this material for any purpose. If you
  distribute adaptations, you must license them under LSA-1.0 and
  include the full license text or a stable link to it. No attribution
  is required. No additional restrictions or DRM may be applied.

=======================================================================
</file>

<file path="package.json">
{
  "name": "lsa-gallery",
  "private": true,
  "version": "1.0.0",
  "scripts": {
    "build:manifest": "node scripts/generate-manifest.js",
    "embed:license": "node scripts/embed-license.js"
  },
  "dependencies": {
    "image-size": "^1.1.1"
  }
}
</file>

<file path="README.md">
# lsa-gallery

A minimalist, high-performance image gallery under **Liberty-ShareAlike 1.0 (LSA-1.0)**.

- Full license text: <https://github.com/ShortTimeNoSee/liberty-sharealike/blob/v1.0/LICENSE>
- SPDX tag (optional for source files): `SPDX-License-Identifier: LicenseRef-LSA-1.0`

## Structure

```text
.
â”œâ”€ LICENSE
â”œâ”€ index.html
â”œâ”€ assets/
â”‚ â”œâ”€ style.css
â”‚ â”œâ”€ app.js
â”‚ â”œâ”€ sw.js
â”‚ â”œâ”€ logo.svg
â”‚ â””â”€ manifest.webmanifest
â”œâ”€ data/
â”‚ â””â”€ images.json # auto-generated by CI
â”œâ”€ img/ # put images here (jpg/png/webp/avif)
â”‚ â””â”€ .gitkeep
â”œâ”€ scripts/
â”‚ â”œâ”€ generate-manifest.js
â”‚ â””â”€ embed-license.js
â”œâ”€ package.json
â””â”€ .github/workflows/
â””â”€ build-and-deploy.yml
```

## Add images

1. Drop files into `img/`.
2. Push to `main`. CI embeds a short LSA-1.0 notice into metadata and rebuilds `data/images.json`.
3. GitHub Pages deploys automatically.

## License notices embedded

- XMP-dc:Rights -> short notice
- XMP-cc:license -> stable license URL

These are non-intrusive and mirror how stock sites annotate assets.
</file>

<file path="scripts/embed-license.js">
/**
 * Embeds a short LSA-1.0 notice into image XMP using exiftool.
 * Non-destructive to pixel data; updates metadata only.
 */
const { execFileSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const LICENSE_URL = 'https://github.com/ShortTimeNoSee/liberty-sharealike/blob/v1.0/LICENSE';
const NOTICE = `Licensed under Liberty-ShareAlike 1.0 (LSA-1.0). If you distribute adaptations, license them under LSA-1.0 and include this full text or a stable link. No attribution required. ${LICENSE_URL}`;

const IMG_DIR = path.join(__dirname, '..', 'img');
if (!fs.existsSync(IMG_DIR)) process.exit(0);

const exts = new Set(['.jpg','.jpeg','.png','.webp','.gif']);
const files = fs.readdirSync(IMG_DIR).filter(f => exts.has(path.extname(f).toLowerCase()));

for (const f of files) {
  const full = path.join(IMG_DIR, f);
  try {
    execFileSync('exiftool', [
      '-overwrite_original',
      `-XMP-dc:Rights=${NOTICE}`,
      `-XMP-cc:license=${LICENSE_URL}`,
      full
    ], { stdio: 'ignore' });
    console.log('Embedded license into', f);
  } catch (e) {
    console.warn('Skipped (exiftool error):', f);
  }
}
</file>

<file path="scripts/generate-manifest.js">
/**
 * Scans ./img and writes ./data/images.json with metadata.
 */
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const imageSize = require('image-size');

const IMG_DIR = path.join(__dirname, '..', 'img');
const OUT_FILE = path.join(__dirname, '..', 'data', 'images.json');

let existing = {};
if (fs.existsSync(OUT_FILE)) {
  try {
    existing = JSON.parse(fs.readFileSync(OUT_FILE, 'utf8'))
      .reduce((acc, e) => { acc[e.file] = e; return acc; }, {});
  } catch { existing = {}; }
}

const exts = new Set(['.jpg','.jpeg','.png','.webp','.avif','.gif']);
const files = fs.readdirSync(IMG_DIR).filter(f => exts.has(path.extname(f).toLowerCase()));

const out = [];

for (const file of files) {
  const p = path.join(IMG_DIR, file);
  const buf = fs.readFileSync(p);
  const { width, height, type } = safeSize(buf) || {};
  const stat = fs.statSync(p);
  const hash = crypto.createHash('sha256').update(buf).digest('hex');
  const prev = existing[file] || {};

  out.push({
    file,
    src: `img/${encodeURIComponent(file)}`,
    title: prev.title || titleFromName(file),
    description: prev.description || '',
    alt: prev.alt || '',
    width: width || null,
    height: height || null,
    bytes: stat.size,
    mime: mimeFromType(type),
    tags: prev.tags || [],
    added: prev.added || Math.floor(stat.mtimeMs || Date.now()),
    sha256: hash
  });
}

fs.mkdirSync(path.dirname(OUT_FILE), { recursive: true });
fs.writeFileSync(OUT_FILE, JSON.stringify(out, null, 2));
console.log(`Wrote ${out.length} records to data/images.json`);

function safeSize(buf) {
  try { return imageSize(buf); }
  catch { return null; }
}
function titleFromName(n) {
  return path.basename(n, path.extname(n)).replace(/[_\-]+/g,' ').replace(/\s+/g,' ').trim();
}
function mimeFromType(t) {
  if (!t) return '';
  return {
    jpg: 'image/jpeg', jpeg: 'image/jpeg',
    png: 'image/png',
    webp: 'image/webp',
    gif: 'image/gif',
    avif: 'image/avif'
  }[t] || '';
}
</file>

</files>
